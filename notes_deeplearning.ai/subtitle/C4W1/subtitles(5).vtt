WEBVTT

1
00:00:01.000 --> 00:00:05.510
You've seen how convolutions over 2D images works.

2
00:00:05.510 --> 00:00:10.190
Now, let's see how you can implement convolutions over not just 2D images,

3
00:00:10.190 --> 00:00:13.295
but over three dimensional volumes.

4
00:00:13.295 --> 00:00:15.610
Let's start with an example.

5
00:00:15.610 --> 00:00:19.970
Let's say you want to detect features not just in a grayscale image,

6
00:00:19.970 --> 00:00:22.550
but in a RGB image.

7
00:00:22.550 --> 00:00:27.035
So, RGB image might be inside a six by six image,

8
00:00:27.035 --> 00:00:29.330
it could be six by six by three,

9
00:00:29.330 --> 00:00:32.980
where the three here corresponds to the three color channels.

10
00:00:32.980 --> 00:00:36.450
So, you can think of this as a stack of three six by six images.

11
00:00:36.450 --> 00:00:41.925
In order to detect edges or some other feature in this image,

12
00:00:41.925 --> 00:00:49.120
you convolve not to have a three by three filter as you had previously,

13
00:00:49.120 --> 00:00:52.430
but now with also a 3D filter,

14
00:00:52.430 --> 00:00:54.558
That's going to be three by three by three.

15
00:00:54.558 --> 00:01:01.960
So, the filter itself will also have three layers corresponding to the red,

16
00:01:01.960 --> 00:01:04.890
green, and blue channels.

17
00:01:04.890 --> 00:01:07.180
So to give these things some names,

18
00:01:07.180 --> 00:01:08.934
this first six here,

19
00:01:08.934 --> 00:01:12.290
that's the height of the image,

20
00:01:12.290 --> 00:01:19.360
that's the width, and this three is the number of channels.

21
00:01:19.360 --> 00:01:24.075
And your filter also similarly has a height,

22
00:01:24.075 --> 00:01:27.995
a width, and the number of channels.

23
00:01:27.995 --> 00:01:31.170
And the number of channels in

24
00:01:31.170 --> 00:01:34.995
your image must match the number of channels in your filter.

25
00:01:34.995 --> 00:01:38.870
So, these two numbers have to be equal.

26
00:01:38.870 --> 00:01:42.365
We'll see on the next slide how this convolution operation actually works,

27
00:01:42.365 --> 00:01:46.770
but the output of this will be a four by four image,

28
00:01:46.770 --> 00:01:49.600
and notice this is four by four by one,

29
00:01:49.600 --> 00:01:50.860
there's no longer a three at the end.

30
00:01:50.860 --> 00:01:56.390
Let's go through in detail how this works,

31
00:01:56.390 --> 00:02:01.905
but let's use a more nicely drawn image.

32
00:02:01.905 --> 00:02:04.830
So here is the six by six by three image,

33
00:02:04.830 --> 00:02:09.413
and here's the three by three by three filter,

34
00:02:09.413 --> 00:02:11.830
and this last number,

35
00:02:11.830 --> 00:02:17.395
the number of channels matches between the image and the filter.

36
00:02:17.395 --> 00:02:22.195
So, to simplify the drawing of this three by three by three filter,

37
00:02:22.195 --> 00:02:25.870
instead of drawing it as a stack of three matrices,

38
00:02:25.870 --> 00:02:33.600
I'm also going to sometimes just draw it as this three dimensional cube like that.

39
00:02:33.600 --> 00:02:37.775
So, to compute the output of this convolution operation,

40
00:02:37.775 --> 00:02:41.593
what you would do is take the three by three by three filter,

41
00:02:41.593 --> 00:02:45.440
and first place it in that upper left most position.

42
00:02:45.440 --> 00:02:50.195
So, notice that this three by three by three filter has 27 numbers,

43
00:02:50.195 --> 00:02:53.950
well, 27 parameters as three cubed.

44
00:02:53.950 --> 00:02:56.180
And so what you do is take each of

45
00:02:56.180 --> 00:03:05.695
these 27 numbers and multiply them with the corresponding numbers from the red,

46
00:03:05.695 --> 00:03:07.425
green, and blue channels of your image.

47
00:03:07.425 --> 00:03:09.620
So, take the first nine numbers for red channel,

48
00:03:09.620 --> 00:03:11.625
then the three beneath it for the green,

49
00:03:11.625 --> 00:03:13.970
and the three beneath it for the blue channel,

50
00:03:13.970 --> 00:03:17.880
and multiply it with the corresponding 27 numbers that

51
00:03:17.880 --> 00:03:22.377
are I guess covered by this yellow cube shown on the left.

52
00:03:22.377 --> 00:03:24.245
Then add up all those numbers,

53
00:03:24.245 --> 00:03:28.615
and this gives you this first number in the output.

54
00:03:28.615 --> 00:03:30.620
And if you compute the next output,

55
00:03:30.620 --> 00:03:34.700
you take this cube and slide it over by one,

56
00:03:34.700 --> 00:03:36.845
and again do the 27 multiplications,

57
00:03:36.845 --> 00:03:40.435
add up the 27 numbers,

58
00:03:40.435 --> 00:03:42.545
that gives you this next output,

59
00:03:42.545 --> 00:03:44.465
do it for the next number over,

60
00:03:44.465 --> 00:03:45.610
for the next position over,

61
00:03:45.610 --> 00:03:48.090
that gives us third output, and so on.

62
00:03:48.090 --> 00:03:50.190
That gives you the forth,

63
00:03:50.190 --> 00:03:53.080
and then one row down,

64
00:03:53.080 --> 00:03:56.620
and then the next one, the next one, the next one, and so on.

65
00:03:56.620 --> 00:03:58.940
All right and you get the idea,

66
00:03:58.940 --> 00:04:02.080
until at the very end,

67
00:04:02.080 --> 00:04:09.030
that's the position you'll have for that final output.

68
00:04:09.030 --> 00:04:10.930
So, what does this allow you to do?

69
00:04:10.930 --> 00:04:12.775
Well, here's the example.

70
00:04:12.775 --> 00:04:15.170
This filter is three by three by three.

71
00:04:15.170 --> 00:04:20.455
So, if you want to detect edges in the red channel of the image,

72
00:04:20.455 --> 00:04:24.550
then you could have the first filter be one, one, one, minus one minus one minus one,

73
00:04:24.550 --> 00:04:31.385
as usual, and have the green channel be all zeros,

74
00:04:31.385 --> 00:04:35.195
and have the blue filter be all zeros.

75
00:04:35.195 --> 00:04:37.100
And maybe have, if

76
00:04:37.100 --> 00:04:38.910
you have these three stack together to form your three by three by three filter,

77
00:04:38.910 --> 00:04:46.040
then this would be a filter that detects edges,

78
00:04:46.040 --> 00:04:49.720
vertical edges, but only in red channel.

79
00:04:49.720 --> 00:04:54.950
Alternatively, if you don't care what color the vertical edge is in,

80
00:04:54.950 --> 00:04:58.927
then you might have a filter just like this,

81
00:04:58.927 --> 00:05:00.460
where is this one,

82
00:05:00.460 --> 00:05:01.520
one, one, minus one,

83
00:05:01.520 --> 00:05:02.800
minus one, minus one,

84
00:05:02.800 --> 00:05:04.648
in all three channels.

85
00:05:04.648 --> 00:05:08.270
So, by setting the second alternative, so the parameters,

86
00:05:08.270 --> 00:05:10.980
you then have the edge detector,

87
00:05:10.980 --> 00:05:12.875
a three by three by three edge detector,

88
00:05:12.875 --> 00:05:15.935
to detects edges in any color.

89
00:05:15.935 --> 00:05:18.920
And with different choices of these parameters,

90
00:05:18.920 --> 00:05:21.380
you can get different feature detectors, all of these three by three by three filter.

91
00:05:21.380 --> 00:05:27.380
And by convention in compute division,

92
00:05:27.380 --> 00:05:30.650
when you have an input with a certain height,

93
00:05:30.650 --> 00:05:32.990
a certain width, and a certain number of channels,

94
00:05:32.990 --> 00:05:36.200
then your filter will have a potential different height,

95
00:05:36.200 --> 00:05:39.493
different width, but the same number of channels.

96
00:05:39.493 --> 00:05:44.780
And in theory, is possible to have a filter that maybe only looks at the red channel,

97
00:05:44.780 --> 00:05:51.330
or maybe a filter that looks at only the green channel and the blue channel.

98
00:05:51.330 --> 00:05:54.565
And once again, you notice that convolving a volume,

99
00:05:54.565 --> 00:06:00.850
a six by six by three convolve with a three by three by three,

100
00:06:00.850 --> 00:06:06.280
that gives a four by four to the output.

101
00:06:06.280 --> 00:06:10.855
Now that you know how to convolve on volumes,

102
00:06:10.855 --> 00:06:17.125
there's one last idea that'll be crucial for building Convolutional Neural Networks,

103
00:06:17.125 --> 00:06:20.040
which is, what if we don't just want to detect vertical edges,

104
00:06:20.040 --> 00:06:23.550
what if we want to detect vertical edges and horizontal edges,

105
00:06:23.550 --> 00:06:25.130
and maybe 45 degree edges,

106
00:06:25.130 --> 00:06:27.080
and maybe 70 degree edges as well.

107
00:06:27.080 --> 00:06:31.890
But in other words, what if you want to use multiple filters at the same time.

108
00:06:31.890 --> 00:06:35.640
So, here's the picture we had from the previous slide,

109
00:06:35.640 --> 00:06:38.640
we had six by six by three convolved with three by three by three,

110
00:06:38.640 --> 00:06:42.420
gives four by four, and maybe this is a vertical edge detector,

111
00:06:42.420 --> 00:06:46.023
or maybe is learning to detect some other feature.

112
00:06:46.023 --> 00:06:52.950
Now, maybe the second filter may be denoted by this orangish color,

113
00:06:52.950 --> 00:07:00.553
which could be a horizontal edge detector.

114
00:07:00.553 --> 00:07:04.090
So, maybe convolving it with the first filter gives you this first four by four output,

115
00:07:04.090 --> 00:07:13.565
and convolving with the second filter gives you a different four by four output.

116
00:07:13.565 --> 00:07:18.485
We can do this, then take these two four by four outputs, take this first one,

117
00:07:18.485 --> 00:07:24.590
put it in front, and you can take the second filter output and well,

118
00:07:24.590 --> 00:07:27.690
let me draw it here, put it at the back as follows,

119
00:07:27.690 --> 00:07:29.000
so that by stacking these two together,

120
00:07:29.000 --> 00:07:35.970
you end up with a four by four by two output volume.

121
00:07:35.970 --> 00:07:40.270
And you can think of the volume as you redraw this is a box I guess,

122
00:07:40.270 --> 00:07:41.775
it would maybe look like this.

123
00:07:41.775 --> 00:07:44.910
So, this will be a four by four by two output volume,

124
00:07:44.910 --> 00:07:49.740
which is the C result of taking your six by six by three image and

125
00:07:49.740 --> 00:07:54.885
convolving it while applying two different three by three filters to it,

126
00:07:54.885 --> 00:07:58.075
resulting in two four by four outputs that I think

127
00:07:58.075 --> 00:08:01.923
it's stacked up to form a four by four by two much volume.

128
00:08:01.923 --> 00:08:06.230
And the two here comes from the fact that we used two different filters.

129
00:08:06.230 --> 00:08:14.320
So, let's just summarize the dimensions.

130
00:08:14.320 --> 00:08:19.680
If you have a n by n by number of channels input image,

131
00:08:19.680 --> 00:08:22.420
so in the example this a six by six by three,

132
00:08:22.420 --> 00:08:26.960
where n subscript capital C is the number of channels,

133
00:08:26.960 --> 00:08:33.853
and you convolve that with a f by f by and again this should be the same n_c,

134
00:08:33.853 --> 00:08:38.360
so this was three by three by three.

135
00:08:38.360 --> 00:08:45.235
And by convention, this and this, have to be the same number.

136
00:08:45.235 --> 00:08:48.050
Then what you get is a n-f+1

137
00:08:48.050 --> 00:08:53.030
by n-f+1 by and then

138
00:08:53.030 --> 00:08:59.879
when you use this n_c_prime,

139
00:08:59.879 --> 00:09:02.390
is really n_c at the next player.

140
00:09:02.390 --> 00:09:06.850
But this is the number of filters that you use.

141
00:09:06.850 --> 00:09:12.690
So, this in our example will be four by four by two.

142
00:09:12.690 --> 00:09:17.005
And I wrote this assuming that you use a stride of one and no padding,

143
00:09:17.005 --> 00:09:19.270
but if you use a different stride of padding then this n-f+1 will be affected

144
00:09:19.270 --> 00:09:26.240
in the usual way as we saw in the previous videos.

145
00:09:26.240 --> 00:09:30.450
So, this idea of convolution on volumes turns out to be really powerful.

146
00:09:30.450 --> 00:09:33.960
Only a small part of it is that you can now

147
00:09:33.960 --> 00:09:38.080
operate directly on RGB in which is with three channels.

148
00:09:38.080 --> 00:09:40.800
But even more important is that you

149
00:09:40.800 --> 00:09:43.580
can now detect two features like vertical and horizontal edges,

150
00:09:43.580 --> 00:09:45.750
or 10, or maybe 128,

151
00:09:45.750 --> 00:09:49.365
or maybe several hundred different features,

152
00:09:49.365 --> 00:09:53.340
and the output will then have a number

153
00:09:53.340 --> 00:09:58.405
of channels equal to the number of features you are detecting.

154
00:09:58.405 --> 00:10:00.290
And as a note a notation,

155
00:10:00.290 --> 00:10:06.225
I've been using your number of channels to denote this last dimension.

156
00:10:06.225 --> 00:10:11.210
In the literature, people will also often call this the death of this 3D volume.

157
00:10:11.210 --> 00:10:17.255
And both notations, channels or death are commonly used in the literature,

158
00:10:17.255 --> 00:10:19.375
but I find death more confusing

159
00:10:19.375 --> 00:10:22.855
because usually you talk about the death of the neural network as well.

160
00:10:22.855 --> 00:10:26.555
So, I'm going to use the term channels in these videos to refer

161
00:10:26.555 --> 00:10:31.890
to the size of this third dimension of these filters.

162
00:10:31.890 --> 00:10:36.545
So, now that you know how to implement convolutions over volumes,

163
00:10:36.545 --> 00:10:41.595
you now are ready to implement one layer of a convolutional neural network.

164
00:10:41.595 --> 00:10:44.000
Let's see how they do that in the next video.