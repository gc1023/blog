The convolutional operation is one of
the fundamental building blocks of a convolutional neural network. Using edge detection as
a motivating example. In this video, you see how
the convolution operation works. In previous videos, I've talked about how the early layers
of a neural network might detect edges. And then the somewhat later layers
might detect parts of objects. And then even later layers maybe
detect parts of complete objects, like people's faces, in this case. In this video, you see how you
can detect edges in an image. Let's take an example. Given a picture like that, for a computer
to figure out what are the objects in this picture, the first thing you might do is
maybe detect vertical edges in this image. So, for example, this image has all those
vertical lines where the railings are, as well as kind of vertical lines,
idea of line, of these pedestrians. And so those get detected in this
vertical edge detector output. You might also want to
detect horizontal edges. So, for example, there's a very strong
horizontal line where this railing is. And then also gets detected,
and it's roughly here. So how do you detect edges
in an image like this? Let's look at an example. Here is a 6 x 6 grayscale image. And because this is a grayscale image,
this is just a 6 x 6 x 1 matrix, rather than 6 x 6 x 3 because there
aren't separate RGB channels. In order to detect edges,
let's say vertical edges in this image, what you can do is
construct a 3 x 3 matrix. And in the hollands, the terminology
of convolutional neural networks, this is going to be called a filter. And I'm going to construct
a 3 x 3 filter or 3 x 3 matrix that looks like this,
1 1 1, 0 0 0, -1 -1 -1. Sometimes research papers will call
this a kernel instead of a filter. But I'm going to use the filter
terminology in these videos. And what you're going to do is take
the 6 x 6 image and convolve it. And the convolution operation
is denoted by this asterisk. And convolve it with the 3 x 3 filter. One slightly unfortunate thing about
the notation is that in mathematics, the asterisk is the standard symbol for
convolution. But in Python, this is also used
to denote multiplication or maybe element-wise multiplication. So this asterisk has dual purposes,
it's overloaded notation. But I'll try to be clear in these videos
when this asterisk refers to convolution. And the output of this convolution
operator will be a 4 x 4 matrix, which you can interpret and
which you can think of as a 4 x 4 image. And the way you compute this
4 x 4 output is as follows. To compute the first element, the upper
left element of this 4 x 4 matrix, what you're going to do is
take the 3 x 3 filter and paste it on top of the 3 x 3 region
of your original input image. So I've written here 1 1 1, 0 0 0, -1 -1 -1. And what you should do is take
the element-wise products. So the first one would be 3 x 1. And then the second one would be 1 x 1,
bring down here, 1 x 1. And then + 2 x 1, this one. And then add up all of
the resulting nine numbers. So then the middle column gives
you 0 x 0 + 5 x 0 + 7 x 0. And then the rightmost
column gives 1 x -1, 8 x -1 + 2 x -1. And adding up these nine
numbers will give you -5. And so I'm going to fill in -5 over here. Okay, and you can add up these nine
numbers in any order, of course. It's just that I went
down the first column, then the second column, then the third. Next, to figure out what
is this second element, you're going to take the blue square and
shift it one step to the right, like so. And let me get rid of
the green marks here. And you're going to do the same
element-wise product and then addition. So you have 0 x 1, + 5 x 1, + 7 x 1, + 1 x 0, + 8 x 0, + 2 x 0, + 2 x -1, + 9 x -1, + 5 x -1. And if you add up those nine numbers,
you end up with -4, and so on. If you shift this to the right, do the
nine products and add them up, you get 0. And then over here, you should get 8. And just to verify,
you have 2 + 9 + 5, that's 16. Then the middle column gives you 0. And then the rightmost column
4 + 1 + 3 x -1, that's -8. So that's 16 on the left column, -8, and that gives you 8, like we have over here. Next, in order to get you
this element in the next row, what you do is take the blue square and
now shift it one down. So you now have it in that position. And again, repeat the element-wise
product and then adding exercise. And if you do that,
you should get -10 here. And if you shift it one to the right,
you should get -2. And then 2, and then 3, and so on, to then throw in all the rest
of the elements of the matrix. And so to be clear,
this -16 would be obtained from this lower right 3 x 3 region. So a 6 x 6 matrix convolved with a 3
x 3 matrix gives you a 4 x 4 matrix. And these images and filters, these are really just matrices
of various dimensions. But the matrix on the left is
convenient to interpret as an image. And the one in the middle,
we interpret as a filter. And the one on the right, we can
interpret that as maybe another image. And this turns out to be
a vertical edge detector. And you see why on the next slide. Before going on, though,
just one other comment. Which is that if you implement this in
a programming language, then in practice, most programming languages will
have some different function rather than an asterisk
to denote convolution. So, for example,
in the programming exercise, you use or you implement a function
called conv_forward. If you do this in tensorflow, there's a function tf.nn.conv2d. And then other deep learning
programming frameworks. In the Keras programming framework,
which you'll see later in this course, there's a function called Conv2D that
implements convolution, and so on. But all the deep learning frameworks
that have good support for convolution will have some function for
implementing this convolution operator. So why is this doing
vertical edge detection? Let's look at another example. So to illustrate this,
we're going to use a simplified image. So here is a simple 6 x 6 image, where the left half of the image is 10 and
the right half is 0. If you caught this as a picture, it might
look like this, where the left half, the 10s,
give you brighter pixel intensity values. And the right half gives you
darker pixel intensity values. I'm using that shade of gray to denote 0s, although maybe it could
also be drawn as black. But in this image, there's clearly a very
strong vertical edge right down the middle of this image as it transitions from
white to black or white to darker color. So when you convolve this
with the 3 x 3 filter, and so this 3 x 3 filter can be
visualized as follows. Where it's lighter,
brighter pixels on the left. And then there's midtones, 0s in
the middle, and then darker on the right. What you get is this matrix on the right. So just to verify this math, if you want. This 0, for example, is obtained by
taking the element-wise products and then multiplying with this 3 x 3 block. And so you get from the left
column 10 + 10 + 10, and then 0s in the middle,
and then -10 -10 -10. Which is why you end up with 0 over here. Whereas, in contrast,
that 30 would be obtained from this. Which you get from having 10 + 10 + 10,
and then -0 -0, which is why you
end up with a 30 over there. Now if you plot this rightmost matrix
as an image, it will look like that, where there's this lighter
region right in the middle. And that corresponds to having
detected this vertical edge down the middle of your 6 x 6 image. And in case the dimensions
here seem a little bit wrong, that the detected edge seems really thick. That's only because we're working with
very small images in this example. And if you're using, say,
a 1000 x 1000 image, rather than 6 x 6 image,
then you find that this does a pretty good job detecting
the vertical edges in your image. And in this example, this bright region in the middle is just
the output image's way of saying that it looks like there's a strong vertical
edge right down the middle of the image. And maybe one intuition to take away
from vertical edge detection is that a vertical edge is a 3 x 3 region
since we're using a 3 x 3 filter. Where there are bright pixels on the left. And you don't care that
much what's in the middle. And dark pixels on the right. And the middle of the image in the 6
x 6 image is really where there could be bright pixels on the left and
dark pixels on the right. And that's why it thinks there's
a vertical edge over there. And the convolution operation gives
you a convenient way to specify how to find these vertical
edges in an image. So you've now seen how
the convolution operator works. In the next video,
you'll see how to take this and use it as one of the basic building
blocks of a convolutional neural network.