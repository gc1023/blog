WEBVTT

1
00:00:00.630 --> 00:00:04.090
Strided convolutions is another piece of

2
00:00:04.090 --> 00:00:09.550
the basic building block of convolutions as used in convolutional neural networks.

3
00:00:09.550 --> 00:00:11.025
Let me show you an example.

4
00:00:11.025 --> 00:00:16.827
Let's say you want to convolve this 7 x 7 image with this 3 x 3 filter,

5
00:00:16.827 --> 00:00:19.290
except that instead of doing it the usual way,

6
00:00:19.290 --> 00:00:23.795
we're going to do it with a stride of two.

7
00:00:23.795 --> 00:00:28.780
What that means is you take the element-wise product as usual in

8
00:00:28.780 --> 00:00:35.725
this upper left 3 x 3 region and then multiply and add and that gives you 91.

9
00:00:35.725 --> 00:00:39.010
But then instead of stepping the blue box over by one step,

10
00:00:39.010 --> 00:00:41.545
we're going to step it over by two steps.

11
00:00:41.545 --> 00:00:46.775
So we're going to make it hop over two steps like so.

12
00:00:46.775 --> 00:00:51.130
Notice how the upper left hand corner has gone from the start to this start,

13
00:00:51.130 --> 00:00:52.825
jumping over one position.

14
00:00:52.825 --> 00:00:56.447
And then you do the usual element-wise product then summing,

15
00:00:56.447 --> 00:00:59.290
and that gives you, it turns out,100.

16
00:00:59.290 --> 00:01:04.390
And now, we're going to do that again and make the blue box jump over by two steps.

17
00:01:04.390 --> 00:01:08.105
So you end up there and that gives you 83.

18
00:01:08.105 --> 00:01:11.136
And now, when you go to the next row,

19
00:01:11.136 --> 00:01:14.560
you again actually take two steps instead of one step.

20
00:01:14.560 --> 00:01:17.870
So we're going to move the blue box over there,

21
00:01:17.870 --> 00:01:25.180
notice how we're skipping over one of the positions and then this gives you 69.

22
00:01:25.180 --> 00:01:27.990
And now you again step over two steps.

23
00:01:27.990 --> 00:01:30.950
This gives you 91, and so on.

24
00:01:30.950 --> 00:01:34.107
So 127 and then for the final row,

25
00:01:34.107 --> 00:01:38.250
44, 72, and 74.

26
00:01:38.250 --> 00:01:41.325
So in this example,

27
00:01:41.325 --> 00:01:49.530
we convolve with a 7 x 7 matrix with a 3 x 3 matrix and we get a 3 x 3 output.

28
00:01:49.530 --> 00:01:54.080
So the input and output dimensions turns out to be governed by the following formula.

29
00:01:54.080 --> 00:02:00.034
If you have n x n image then you convolve with an f x f filter,

30
00:02:00.034 --> 00:02:02.527
and if you use padding p,

31
00:02:02.527 --> 00:02:10.895
and stride s. So in this example, s = 2,

32
00:02:10.895 --> 00:02:16.357
then you end up with an output that is n plus 2 to the p

33
00:02:16.357 --> 00:02:19.010
minus f. And now because you're

34
00:02:19.010 --> 00:02:22.455
stepping s steps at a time instead of just one step at a time,

35
00:02:22.455 --> 00:02:29.628
you now divide by s plus 1 and then by the same thing.

36
00:02:29.628 --> 00:02:31.425
So in our example,

37
00:02:31.425 --> 00:02:40.550
we have 7 plus zero minus 3 divided 2,

38
00:02:40.550 --> 00:02:44.180
s stripe plus 1 equals, let's see,

39
00:02:44.180 --> 00:02:49.309
that's 4 over 2 plus 1 = 3,

40
00:02:49.309 --> 00:02:54.165
which is why we wound up with this 3 x 3 output.

41
00:02:54.165 --> 00:02:57.445
Now just one last detail which is,

42
00:02:57.445 --> 00:03:02.115
what if this fraction is not an integer?

43
00:03:02.115 --> 00:03:05.625
In that case, we're going to round this down.

44
00:03:05.625 --> 00:03:09.112
So this notation denotes the floor of something.

45
00:03:09.112 --> 00:03:14.395
So this is also called the floor of z.

46
00:03:14.395 --> 00:03:18.075
It means taking z and rounding down to the nearest integer.

47
00:03:18.075 --> 00:03:22.585
And if the way this is implemented is that you take this type of

48
00:03:22.585 --> 00:03:25.450
blue box multiplication only if the blue box is fully

49
00:03:25.450 --> 00:03:29.225
contained within the image or the image plus the padding.

50
00:03:29.225 --> 00:03:31.420
And if any of this blue box, kind of,

51
00:03:31.420 --> 00:03:33.230
part of it hangs outside,

52
00:03:33.230 --> 00:03:35.935
then you just do not do that computation.

53
00:03:35.935 --> 00:03:42.250
Then it turns out that that's the convention that your 3 x 3 filter must lie

54
00:03:42.250 --> 00:03:45.305
entirely within your image or the image plus

55
00:03:45.305 --> 00:03:50.020
padding region before there's a corresponding output generated, that's the convention.

56
00:03:50.020 --> 00:03:55.670
Then the right thing to do to compute the output dimension is

57
00:03:55.670 --> 00:04:01.990
to round down in case this n + 2 p - f over s is not an integer.

58
00:04:01.990 --> 00:04:04.205
So just to summarize the dimensions,

59
00:04:04.205 --> 00:04:09.100
if you have an n x n matrix or n x n image that you convolve with an f x f matrix,

60
00:04:09.100 --> 00:04:11.090
an f x f filter with padding p,

61
00:04:11.090 --> 00:04:16.430
and stride s, then the output size will have this dimension.

62
00:04:16.430 --> 00:04:21.000
And it is nice we can choose all of these numbers so that that is an integer,

63
00:04:21.000 --> 00:04:27.660
although sometimes, you don't have to do that and rounding down is just fine as well.

64
00:04:27.660 --> 00:04:33.308
But please feel free to work through a few examples of values of n, f, p,

65
00:04:33.308 --> 00:04:36.910
and s for yourself to convince yourself if you want that

66
00:04:36.910 --> 00:04:41.331
this formula is correct for the output size.

67
00:04:41.331 --> 00:04:43.240
Now before moving on,

68
00:04:43.240 --> 00:04:48.550
there is a technical comment I want to make about cross-correlations versus convolutions.

69
00:04:48.550 --> 00:04:53.735
And this won't affect what you have to do to implement convolutional neural networks,

70
00:04:53.735 --> 00:04:59.790
but depending on if you read a different math textbook or signal processing textbook,

71
00:04:59.790 --> 00:05:04.925
there is one other possible inconsistency in your notation.

72
00:05:04.925 --> 00:05:07.850
Which is that, if you look at a typical math textbook,

73
00:05:07.850 --> 00:05:10.010
the way that a convolution is defined,

74
00:05:10.010 --> 00:05:13.221
before doing the element-wise product and summing,

75
00:05:13.221 --> 00:05:16.115
there's actually one other step that you will first take,

76
00:05:16.115 --> 00:05:20.550
which is to convolve this 6 x 6 matrix with the 3 x 3 filter.

77
00:05:20.550 --> 00:05:23.940
You will first take the 3 x 3 filter and flip

78
00:05:23.940 --> 00:05:28.520
it on the horizontal as well as the vertical axis.

79
00:05:28.520 --> 00:05:30.515
So this 3, 4, 5, 1, 0, 2, minus 1,

80
00:05:30.515 --> 00:05:33.830
9, 7, will become,

81
00:05:33.830 --> 00:05:42.255
3 goes here, 4 goes there, 5 goes there.

82
00:05:42.255 --> 00:05:45.180
And then the second row becomes this 1, 0,

83
00:05:45.180 --> 00:05:49.720
2 minus 1, 9, 7.

84
00:05:49.720 --> 00:05:53.590
This is really taking the 3 x 3 filter and mirroring it,

85
00:05:53.590 --> 00:05:58.218
both on the vertical and horizontal axes.

86
00:05:58.218 --> 00:06:04.225
And then there was this flipped matrix that you would then copy over here.

87
00:06:04.225 --> 00:06:06.175
So to compute the output,

88
00:06:06.175 --> 00:06:10.045
you would take 2 times 7 plus 3 times 2,

89
00:06:10.045 --> 00:06:15.275
plus 7 times 5, and so on.

90
00:06:15.275 --> 00:06:20.360
You actually multiply out the elements of this flipped matrix in order to compute

91
00:06:20.360 --> 00:06:29.688
the upper lefthand-most elements of the 4 x 4 output as follows.

92
00:06:29.688 --> 00:06:33.270
And then you take those nine numbers and shift them over by one,

93
00:06:33.270 --> 00:06:35.916
shift them over by one, and so on.

94
00:06:35.916 --> 00:06:39.079
So the way we've defined the convolution operation in

95
00:06:39.079 --> 00:06:43.495
these videos is that we've skipped this mirroring operation.

96
00:06:43.495 --> 00:06:46.695
And technically, what we're actually doing, really,

97
00:06:46.695 --> 00:06:48.633
the operation we've been using for

98
00:06:48.633 --> 00:06:54.180
the last few videos is sometimes called cross-correlation instead of convolution.

99
00:06:54.180 --> 00:06:57.645
That in deep learning literature, by convention,

100
00:06:57.645 --> 00:07:01.760
we just call this a convolution operation.

101
00:07:01.760 --> 00:07:03.590
So just to summarize,

102
00:07:03.590 --> 00:07:06.215
by convention in machine learning,

103
00:07:06.215 --> 00:07:10.730
we usually do not bother with this flipping operation and technically,

104
00:07:10.730 --> 00:07:14.450
this operation is maybe better called cross-correlation,

105
00:07:14.450 --> 00:07:20.165
but most of the deep learning literature just calls this the convolution operator.

106
00:07:20.165 --> 00:07:23.430
And so, I'm going to use that convention in these videos as well.

107
00:07:23.430 --> 00:07:27.420
And if you read a lot of the machine learning literature,

108
00:07:27.420 --> 00:07:30.710
you find most people just call this the

109
00:07:30.710 --> 00:07:35.490
convolution operator without bothering to use these flips.

110
00:07:35.490 --> 00:07:41.050
And it turns out that in signal processing or in certain branches of mathematics,

111
00:07:41.050 --> 00:07:44.650
doing the flipping in the definition of convolution

112
00:07:44.650 --> 00:07:48.820
causes convolution operator to enjoy this property,

113
00:07:48.820 --> 00:07:54.058
that A convolved with B convolved with C is equal to A convolved with B,

114
00:07:54.058 --> 00:07:58.505
convolved with C, and this is called associativity in mathematics.

115
00:07:58.505 --> 00:08:01.665
And this is nice for some signal processing applications,

116
00:08:01.665 --> 00:08:03.170
but for deep neural networks,

117
00:08:03.170 --> 00:08:04.470
it really doesn't matter.

118
00:08:04.470 --> 00:08:08.680
And so, omitting this double mirroring operation just simplifies

119
00:08:08.680 --> 00:08:14.450
the code and makes the neural networks work just as well.

120
00:08:14.450 --> 00:08:18.675
And by convention, most of us just call this convolution,

121
00:08:18.675 --> 00:08:24.240
even though the mathematicians prefer we call this cross-correlation sometimes.

122
00:08:24.240 --> 00:08:28.621
But this should not affect anything you have to implement

123
00:08:28.621 --> 00:08:31.650
in the following exercises and should

124
00:08:31.650 --> 00:08:38.070
not affect your ability to read and understand the deep learning literature.

125
00:08:38.070 --> 00:08:41.600
So you've now seen how to carry out convolutions and you've

126
00:08:41.600 --> 00:08:45.715
seen how to use padding as well as strides for convolutions.

127
00:08:45.715 --> 00:08:49.795
But so far, all we've been using is convolutions over matrices,

128
00:08:49.795 --> 00:08:51.545
like over a 6 x 6 matrix.

129
00:08:51.545 --> 00:08:55.670
In the next video, you see how to carry out convolutions over volume.

130
00:08:55.670 --> 00:08:59.925
And this will make what you can do with convolutions suddenly much more powerful.

131
00:08:59.925 --> 00:09:01.580
Let's go on to the next-